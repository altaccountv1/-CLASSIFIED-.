local HttpService = game:GetService("HttpService")
local S_hwid = game:GetService("RbxAnalyticsService"):GetClientId() or "Unknown"
local plr = game.Players.LocalPlayer
local DName = plr.DisplayName
local UName = plr.Name
local WV = "false"
local status = "nil"
local inserted = ""
local maxAttempts = 3  -- Allow 3 attempts
local attempts = 0
local checked = false
local ME = game:GetService("ReplicatedStorage").Events.ME -- Assuming ME is the remote event

-- Webhook URL
local Webhook_URL = "https://discord.com/api/webhooks/1205437358166646836/EW0c5Tfm0UIzK480wbPGS_TsI9a99hylePA5sf6CNDuPxgK1WXFiueHADjEKu5BNgf9c"

-- Whitelist with user-specific passwords
local allowedUsers = {
    [2715331314] = "sugercoat",  -- UserId: Password
    [1680946405] = "astro456",
    [2626396605] = "sugercoat"    -- Changed to sugercoat for this UserId
}

-- Blacklist of users or hardware IDs
local blacklisted = {
    "b997b340-4056-40ce-bae7-95ce083d6465", 140378057
}

-- GUI Initialization
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Password Access", HidePremium = false, SaveConfig = false, ConfigFolder = "OrionTest", IntroEnabled = false})
local Tab = Window:MakeTab({Name = "Access", Icon = "nil", PremiumOnly = false})

Tab:AddTextbox({
    Name = "Enter Password",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        inserted = Value
    end    
})

Tab:AddButton({
    Name = "Submit Password",
    Callback = function()
        attempts = attempts + 1
        
        local fraud = false
        WV = "No"  -- Default to no access

        -- Check if the user is whitelisted
        local correctPassword = allowedUsers[plr.UserId]
        if correctPassword then
            if correctPassword == inserted then
                WV = "Yes"  -- Access granted
            else
                for userId, password in pairs(allowedUsers) do
                    if password == inserted and userId ~= plr.UserId then
                        fraud = true
                        WV = "No"  -- Deny access, but mark it as fraud
                        break
                    end
                end
            end
        elseif table.find(blacklisted, S_hwid) or table.find(blacklisted, plr.UserId) then
            WV = "Blacklisted"  -- Blacklisted user
        end

        -- If attempts are less than max, provide feedback without kicking
        if attempts < maxAttempts then
            status = (WV == "Yes" and "Access Granted") or (WV == "Blacklisted" and "Access Denied, Blacklisted") or "Access Denied"
            if fraud then status = "Access Denied, Fraud" end
            
            -- Notify user about the current status
            OrionLib:MakeNotification({Name = "Attempt " .. attempts, Content = status, Image = "rbxassetid://4483345998", Time = 5})

        else
            -- Prepare to take action based on the final status
            if WV == "Yes" then
                OrionLib:MakeNotification({Name = "Access Granted", Content = "Welcome, " .. DName .. "!", Image = "rbxassetid://4483345998", Time = 5})
                checked = true
            else
                -- Send webhook notification right before taking action
                local embedcolor = (WV == "Yes" and 4388219) or 14887209
                local response = request({
                    Url = Webhook_URL,
                    Method = "POST",
                    Headers = {["Content-Type"] = "application/json"},
                    Body = HttpService:JSONEncode({
                        ["content"] = "",
                        ["embeds"] = {{
                            ["title"] = "Explorer Security Action",
                            ["description"] = DName .. " / " .. UName .. " is attempting access. \n \n **Status** \n " .. (WV == "Blacklisted" and "Access Denied, Blacklisted" or "Access Denied, Fraud"),
                            ["type"] = "rich",
                            ["color"] = embedcolor,
                            ["fields"] = {
                                {["name"] = "Information", ["value"] = "UserId: " .. tostring(plr.UserId) .. "\n Password Inserted: " .. tostring(inserted)},
                                {["name"] = "Hardware Id", ["value"] = S_hwid, ["inline"] = true}
                            }
                        }}
                    })
                })

                -- Fire event and crash the game
                ME:FireServer(SoundEvent)
                plr:Kick((WV == "Blacklisted" and "Access Denied, Blacklisted") or "Access Denied, Fraud")
                while true do
                    local part = Instance.new("Part", workspace)
                    part.Name = "FUCKYOU"
                end
            end
        end
    end
})

repeat task.wait() until checked == true


